 - OAuth2
 - User management
 - CSRF
 - Spring Boot dev tools 
 - patch method?
 - URL params to object 
 - handle custom json (JsonNode or Map<String, Object>) - HandlerMethodArgumentResolver? or  Converter<String, LocalDateTime>
 
 public class MetaDataResolver implements HandlerMethodArgumentResolver {
    private static final String TRANSACTION_ID = "TRANSACTION-ID";
    private static final String ACCESS_KEY = "ACCESS-KEY";
    private List<String> metaDataHeaderNames = Arrays.asList(TRANSACTION_ID, ACCESS_KEY);

    @Override
    public boolean supportsParameter(MethodParameter parameter) {
        return parameter.getParameterType().equals(MetaData.class);
    }

    @Override
    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
        HashMap<String, String> map = new HashMap<>();
        metaDataHeaderNames.forEach(name -> {
            if (webRequest.getHeader(name) != null) {
                map.put(name, webRequest.getHeader(name));
            }
        });
        return new MetaData(map);
    }
	}

	 @Configuration
	public class Config extends WebMvcConfigurerAdapter {
	    @Override
	    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {
	        argumentResolvers.add(new MetaDataResolver());
	    }
	}
   @JsonSerialize(using=JsonDateSerializer.class) +  extends JsonSerializer<Date>
   @JsonDeserialize(using = PersonDeserializer.class) + extends JsonDeserializer
   ...
        final JavaTimeModule javaTimeModule = new JavaTimeModule();
        javaTimeModule.addSerializer(OffsetDateTime.class, new CustomOffsetDateTimeSerializer(dateTimeFormatter));
        javaTimeModule.addDeserializer(OffsetDateTime.class, new CustomOffsetDateTimeDeserializer(dateTimeFormatter));

        mapper.registerModule(new Jdk8Module());
        mapper.registerModule(javaTimeModule);
        mapper.registerModule(new ParameterNamesModule());
        
		@Component
		class CustomOffsetDateTimeDeserializer extends JsonDeserializer<OffsetDateTime>    
		
	OR! 
	just use Map	
	
 - add request context
 - dto serializable? 